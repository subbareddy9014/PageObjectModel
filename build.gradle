plugins {
    id 'java'
}

group 'Selenium'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
    jcenter()
}

configurations { antClasspath }
dependencies {
    antClasspath 'ant:ant-javamail:1.6.5'
    antClasspath 'javax.activation:activation:1.1.1'
    antClasspath 'javax.mail:mail:1.4.7'
}
ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClasspath.each { File jar ->
    antClassLoader.addURL(jar.toURI().toURL())
}

def getPropertyX(String propName) {
    return hasProperty(propName) ? getProperty(propName) : ''
}

static String getCurrentTime() {
    return new Date().format("dd_MMMMM_yyyy_hh_mm_ss_a_z")
}

//Read command line arguments
String browser = getPropertyX("browser")
String currentTime = getCurrentTime()
String systemOSName = System.properties['os.name']

task validateGoogleLogin {
    dependsOn 'clean'
    dependsOn 'runTests'
    dependsOn 'zipHTMLReports'
    dependsOn 'zipExtentReports'
    dependsOn 'publishReports'
}

task runTests(type: Test) {
    mustRunAfter(clean)
    if (!browser.isEmpty()) {
        systemProperty 'browser', browser
    } else {
        //throw new GradleException("Test configurations are not properly set")
    }
    useTestNG() {
        ignoreFailures = true
        suites 'src/test/resources/testSuites/tests.xml'
        outputDirectory = file("$project.buildDir/reports/HtmlReport")
    }
    testLogging.events "passed", "skipped", "failed"
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
    reports.html.enabled = false
}

task zipHTMLReports(type: Zip) {
    mustRunAfter(runTests)
    archiveName = "${currentTime}_GoogleLoginTests_HTMLReport.zip"
    destinationDir = file("$project.buildDir/reports/")
    from "$project.buildDir/reports/HtmlReport/"
}

task zipExtentReports(type: Zip) {
    mustRunAfter(zipHTMLReports)
    archiveName = "${currentTime}_GoogleLoginTests_ExtentReport.zip"
    destinationDir = file("$project.buildDir/reports/")
    from "$project.buildDir/reports/ExtentReport/"
}

task publishReports {
    mustRunAfter(zipExtentReports)
    doLast {
        String emailRecipients = [
                "<Comma separated email recipients>"
        ].join(",")
        String ccRecipients = [
                "<Comma separated email recipients>"
        ].join(",")
        def mailParams = [
                mailhost       : "smtp.gmail.com",
                user           : "<Your Gmail ID>",
                password       : "<Gmail ID Password>",
                mailport       : "465",
                ssl            : "true",
                subject        : "Google Account Login Automation Test Report On ${browser} Browser, On ${systemOSName} Operating System",
                messagemimetype: "text/html",
                from           : "<Your Gmail ID>",
                tolist         : emailRecipients,
                cclist         : ccRecipients
        ]
        File emailableReport = file("build/reports/HtmlReport/emailable-report.html")
        String html_text = emailableReport.exists() ? emailableReport.text : ""
        ant.mail(mailParams) {
            message("Hi All,<br> " + "${html_text}")
        }
    }
}

dependencies {
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.testng:testng:6.14.3'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'org.apache.poi:poi:4.0.1'
    implementation 'org.apache.poi:poi-examples:4.0.1'
    implementation 'org.apache.poi:poi-excelant:4.0.1'
    implementation 'org.apache.poi:poi-ooxml:4.0.1'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.0.1'
    implementation 'org.apache.poi:poi-scratchpad:4.0.1'
    implementation 'com.aventstack:extentreports:4.0.9'
    compile        'org.apache.commons:commons-lang3:3.9'
}
